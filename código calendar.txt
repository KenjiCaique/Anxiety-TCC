npm add react-native-calendars
npx expo install @react-native-async-storage/async-storage

//app/Calendar/index.tsx:

import { Feather } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import { getAuth } from "firebase/auth";
import { doc, getFirestore, setDoc } from "firebase/firestore";
import { useState } from "react";
import { Modal, Text, TextInput, TouchableOpacity, View } from "react-native";
import * as Animatable from "react-native-animatable";
import { Calendar, DateData, LocaleConfig } from "react-native-calendars";

import { ptBR } from "@/localeCalendarConfig";
import { styles } from "../../styles/Calendar.styles";

// Configuração do calendário em pt-BR
LocaleConfig.locales["pt-br"] = ptBR;
LocaleConfig.defaultLocale = "pt-br";

export default function CalendarScreen() {
  const navigation = useNavigation();
  const [day, setDay] = useState<DateData>();
  const [moodColor, setMoodColor] = useState("");
  const [note, setNote] = useState("");
  const [marked, setMarked] = useState<Record<string, any>>({});
  const [modalVisible, setModalVisible] = useState(false);

  const handleBackPress = () => {
  if (note || moodColor) {
    const confirmExit = confirm("Você tem alterações não salvas. Tem certeza que deseja sair?");
    if (confirmExit) {
      handleSave();  // Salva antes de sair
      navigation.goBack();  // Aí sim volta à tela anterior
    }
  } else {
    navigation.goBack();  // Sai sem salvar
  }
};
  const auth = getAuth();
  const firestore = getFirestore();

  const moodOptions = [
    { label: "Bom", color: "green" },
    { label: "Neutro", color: "purple" },
    { label: "Ruim", color: "orange" },
    { label: "Muito Ruim", color: "red" },
  ];

  const handleDayPress = (selectedDay: DateData) => {
    setDay(selectedDay);

    const data = marked[selectedDay.dateString];
    if (data) {
      setMoodColor(data.selectedColor || "");
      setNote(data.note || "");
    } else {
      setMoodColor("");
      setNote("");
    }

    setModalVisible(true);
  };

  const handleSave = async () => {
    const userId = auth.currentUser?.uid;
  console.log("User ID:", userId);  // Verifique o ID do usuário
  
  if (!userId) {
    alert("Você precisa estar logado para salvar as informações.");
    return;
  }
    
    
    if (day && moodColor) {
      const newMarked = {
        ...marked,
        [day.dateString]: {
          marked: true,
          dotColor: moodColor,
          selected: true,
          selectedColor: moodColor,
          note,
          customStyles: {
            text: {
              color: "white",
              fontSize: 10,
              marginTop: 30,
              backgroundColor: "transparent",
            },
          },
        },
      };

      setMarked(newMarked);

      try {
        const userId = auth.currentUser?.uid;
        if (userId) {
          await setDoc(doc(firestore, "users", userId, "calendar", day.dateString), {
            date: day.dateString,
            mood: moodColor,
            note,
          });
        }
      } catch (err) {
        console.error("Erro ao salvar no Firestore:", err);
      }
    }

    setNote("");
    setMoodColor("");
    setModalVisible(false);
  };

  return (
    <Animatable.View animation="fadeInUp" duration={600} style={styles.container}>
      {/* Botão de voltar */}
      <TouchableOpacity onPress={handleBackPress} style={{ marginBottom: 16 }}>
        <Feather name="arrow-left" size={24} color="#e8e8e8" />
      </TouchableOpacity>


      <Calendar
        style={styles.calendar}
        markedDates={marked}
        onDayPress={handleDayPress}
        renderArrow={(direction: "right" | "left") => (
          <Feather size={24} color="#e8e8e8" name={`chevron-${direction}`} />
        )}
        headerStyle={styles.calendarHeader}
        theme={{
          textMonthFontSize: 18,
          monthTextColor: "#e8e8e8",
          todayTextColor: "#3E2E45",
          selectedDayBackgroundColor: "#3E2E45",
          selectedDayTextColor: "#e8e8e8",
          arrowColor: "#e8e8e8",
          calendarBackground: "transparent",
          textDayStyle: { color: "#e8e8e8" },
          arrowStyle: { margin: 0, padding: 0 },
        }}
        hideExtraDays
      />

      {day?.dateString && note ? (
        <View style={styles.annotationContainer}>
          <Text style={styles.annotationTitle}>Anotação para {day.dateString}:</Text>
          <Text style={styles.annotationText}>{note}</Text>
        </View>
      ) : null}

      <Modal animationType="fade" transparent visible={modalVisible} onRequestClose={() => setModalVisible(false)}>
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <Text style={styles.modalTitle}>Como você se sentiu hoje?</Text>

            {moodOptions.map(({ label, color }) => (
              <Text
                key={label}
                style={[
                  styles.moodOption,
                  {
                    backgroundColor: moodColor === color ? color : "#4c3a50",
                    color: moodColor === color ? "#fff" : "#e8e8e8",
                    fontWeight: moodColor === color ? "bold" : "normal",
                  },
                ]}
                onPress={() => setMoodColor(color)}
              >
                {label}
              </Text>
            ))}

            <Text style={styles.inputLabel}>Escreva sobre o dia:</Text>
            <TextInput
              multiline
              numberOfLines={4}
              value={note}
              onChangeText={setNote}
              placeholder="Escreva aqui..."
              placeholderTextColor="#aaa"
              style={styles.input}
            />

            <View style={styles.modalButtons}>
              <Text onPress={handleSave} style={styles.saveButton}>Salvar</Text>
              <Text onPress={() => setModalVisible(false)} style={styles.cancelButton}>Cancelar</Text>
            </View>
          </View>
        </View>
      </Modal>
    </Animatable.View>
  );
}
export const ptBR = {
    monthNames: [
        "Janeiro",
        "Fevereiro",
        "Março",
        "Abril",
        "Maio",
        "Junho",
        "Julho",
        "Agosto",
        "Setembro",
        "Outubro",
        "Novembro",
        "Dezembro",
    ],
    monthNamesShort: [
        "Jan",
        "Fev",
        "Mar",
        "Abr",
        "Mai",
        "Jun",
        "Jul",
        "Ago",
        "Set",
        "Out",
        "Nov",
        "Dez",
    ],
    dayNames: [
        "Domingo",
        "Segunda",
        "Terça",
        "Quarta",
        "Quinta",
        "Sexta",
        "Sábado",
    ],
    dayNamesShort: ["DOM","SEG","TER","QUA","QUI","SEX","SÁB",],
    today: "Hoje",
}
import { StyleSheet } from "react-native";

export const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#181818",
    padding: 24,
  },

  calendar: {
    backgroundColor: "transparent",
  },

  calendarHeader: {
    borderBottomWidth: 0.5,
    borderBottomColor: "#e8e8e8",
    paddingBottom: 10,
    marginBottom: 10,
  },

  annotationContainer: {
    marginTop: 20,
    paddingHorizontal: 20,
  },

  annotationTitle: {
    color: "#e8e8e8",
    fontWeight: "bold",
    marginBottom: 4,
  },

  annotationText: {
    color: "#e8e8e8",
  },

  modalOverlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    padding: 20,
  },

  modalContainer: {
    backgroundColor: "#3E2E45",
    padding: 25,
    borderRadius: 20,
    width: "100%",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 10,
  },

  modalTitle: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 15,
    textAlign: "center",
  },

  moodOption: {
    padding: 10,
    borderRadius: 10,
    marginBottom: 8,
    textAlign: "center",
  },

  inputLabel: {
    color: "#e8e8e8",
    marginTop: 20,
    marginBottom: 6,
    fontWeight: "bold",
  },

  input: {
    backgroundColor: "#fff",
    borderRadius: 10,
    padding: 10,
    textAlignVertical: "top",
  },

  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },

  saveButton: {
    backgroundColor: "green",
    color: "white",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
    fontWeight: "bold",
  },

  cancelButton: {
    backgroundColor: "#aa0000",
    color: "white",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
    fontWeight: "bold",
  },
});
